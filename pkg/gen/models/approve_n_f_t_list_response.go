// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApproveNFTListResponse ApproveNFTListResponse
//
// swagger:model ApproveNFTListResponse
type ApproveNFTListResponse struct {

	// approved list
	ApprovedList []*ApproveResult `json:"approved_list"`

	// ChainID
	ChainID string `json:"chain_id,omitempty"`

	// Whether the contract is verified on blockchain explorer.
	IsOpenSource int32 `json:"is_open_source,omitempty"`

	// Whether NFT is certified on a reputable trading platform.
	IsVerified int32 `json:"is_verified,omitempty"`

	// Whether the NFT is malicious or contains high risk.
	MaliciousAddress int32 `json:"malicious_address,omitempty"`

	// Specific malicious behaviors or risks of this NFT.
	MaliciousBehavior []string `json:"malicious_behavior"`

	// nft address
	NftAddress string `json:"nft_address,omitempty"`

	// NFT name
	NftName string `json:"nft_name,omitempty"`

	// NFT symbol
	NftSymbol string `json:"nft_symbol,omitempty"`
}

// Validate validates this approve n f t list response
func (m *ApproveNFTListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveNFTListResponse) validateApprovedList(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedList) { // not required
		return nil
	}

	for i := 0; i < len(m.ApprovedList); i++ {
		if swag.IsZero(m.ApprovedList[i]) { // not required
			continue
		}

		if m.ApprovedList[i] != nil {
			if err := m.ApprovedList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("approved_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("approved_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this approve n f t list response based on the context it is used
func (m *ApproveNFTListResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprovedList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproveNFTListResponse) contextValidateApprovedList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApprovedList); i++ {

		if m.ApprovedList[i] != nil {
			if err := m.ApprovedList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("approved_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("approved_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApproveNFTListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproveNFTListResponse) UnmarshalBinary(b []byte) error {
	var res ApproveNFTListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
