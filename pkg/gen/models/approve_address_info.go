// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApproveAddressInfo ApproveAddressInfo
//
// swagger:model ApproveAddressInfo
type ApproveAddressInfo struct {

	// Spender name
	ContractName string `json:"contract_name,omitempty"`

	// Spender's deployer
	CreatorAddress string `json:"creator_address,omitempty"`

	// Spender's deployed time
	DeployedTime int64 `json:"deployed_time,omitempty"`

	// Whether the spender has a history of malicious behavior or contains high risk.
	DoubtList int32 `json:"doubt_list,omitempty"`

	// Whether the spender is a contract.
	IsContract int32 `json:"is_contract,omitempty"`

	// Whether the spender is verified on blockchain explorer.
	IsOpenSource int32 `json:"is_open_source,omitempty"`

	// Specific malicious behaviors or risks of this spender.
	MaliciousBehavior []string `json:"malicious_behavior"`

	// Spender tag
	Tag string `json:"tag,omitempty"`

	// Whether the spender is on the whitelist, and can be trusted
	TrustList int32 `json:"trust_list,omitempty"`
}

// Validate validates this approve address info
func (m *ApproveAddressInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this approve address info based on context it is used
func (m *ApproveAddressInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApproveAddressInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproveAddressInfo) UnmarshalBinary(b []byte) error {
	var res ApproveAddressInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
