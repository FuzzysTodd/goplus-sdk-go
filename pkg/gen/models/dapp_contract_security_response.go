// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DappContractSecurityResponse DappContractSecurityResponse
//
// swagger:model DappContractSecurityResponse
type DappContractSecurityResponse struct {

	// audit info(Notice:When the dApp was not audited, ("is_audit"=0), it will return "null".If there are multiple audit reports, the information of the latest audit report is displayed.)
	AuditInfo []*AuditInfo `json:"audit_info"`

	// contracts security
	ContractsSecurity []*ContractsSecurity `json:"contracts_security"`

	// It describes whether the dApp was audited by a reputable audit firm.
	// "1" means true;
	// "0" means that we have not found audit information for this dApp .(Notice:Return "0" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)
	IsAudit int32 `json:"is_audit,omitempty"`

	// It describes the dApp project name.
	ProjectName string `json:"project_name,omitempty"`

	// It describes whether the dapp is a famous and trustworthy one. "1" means true;
	// "0" means that this dapp is not yet in our trusted list.(Notice:(1) Only "trust_list": "1" means it is a famous and trustworthy dapp.
	// (2) "0" return doesn't mean it is risky.)
	TrustList int32 `json:"trust_list,omitempty"`

	// It describes the dApp's website link.
	URL string `json:"url,omitempty"`
}

// Validate validates this dapp contract security response
func (m *DappContractSecurityResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractsSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DappContractSecurityResponse) validateAuditInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditInfo); i++ {
		if swag.IsZero(m.AuditInfo[i]) { // not required
			continue
		}

		if m.AuditInfo[i] != nil {
			if err := m.AuditInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audit_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audit_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DappContractSecurityResponse) validateContractsSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.ContractsSecurity) { // not required
		return nil
	}

	for i := 0; i < len(m.ContractsSecurity); i++ {
		if swag.IsZero(m.ContractsSecurity[i]) { // not required
			continue
		}

		if m.ContractsSecurity[i] != nil {
			if err := m.ContractsSecurity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts_security" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contracts_security" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dapp contract security response based on the context it is used
func (m *DappContractSecurityResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContractsSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DappContractSecurityResponse) contextValidateAuditInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditInfo); i++ {

		if m.AuditInfo[i] != nil {
			if err := m.AuditInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audit_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audit_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DappContractSecurityResponse) contextValidateContractsSecurity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContractsSecurity); i++ {

		if m.ContractsSecurity[i] != nil {
			if err := m.ContractsSecurity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts_security" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contracts_security" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DappContractSecurityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DappContractSecurityResponse) UnmarshalBinary(b []byte) error {
	var res DappContractSecurityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
